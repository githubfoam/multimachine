# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.

# https://linuxhint.com/ansible-tutorial-beginners/
# https://linuxhint.com/ansible-roles-tutorial/

Vagrant.configure("2") do |config|
  config.vm.provider "virtualbox" do |vb|
    vb.gui = false
    vb.memory = "512"
    vb.cpus = 1
  end

  config.vm.define "apache01" do |webtier|
    webtier.vm.box = "bento/ubuntu-16.04"
    webtier.vm.hostname = "apache01"
    webtier.vm.network "private_network", ip: "192.168.45.10"
    webtier.vm.provider "virtualbox" do |vb|
        vb.name = "apache01"
    end
    # https://www.vagrantup.com/docs/provisioning/ansible_local.html
    # ansible-galaxy command is executed by default as vagrant user
    # Setting galaxy_roles_path to a folder like /etc/ansible/roles will fail
    # ansible-galaxy will extract the role a second time in /home/vagrant/.ansible/roles/.
    # if your playbook uses become to run as root, it will fail with a "role was not found" error.
    # To work around that, you can use ansible.galaxy_command to prepend the command with sudo
    webtier.vm.provision "ansible_local" do |ansible|
    ansible.playbook = "deploy.yml"
    ansible.become = true
    ansible.compatibility_mode = "2.0"
    ansible.version = "2.8.2"
    ansible.galaxy_role_file = "/vagrant/requirements.yml"
    ansible.galaxy_roles_path = "/etc/ansible/roles"
    ansible.galaxy_command = "sudo ansible-galaxy install --role-file=%{role_file} --roles-path=%{roles_path} --force"
    end
    webtier.vm.provision "shell", inline: <<-SHELL
    # run browser and type http://192.168.45.10/
          echo "apache01 up && running"
    SHELL
    end


end
